package kotlin.sequences;

import com.facebook.share.internal.MessengerShareContentUtility;
import com.taobao.weex.common.Constants;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.coroutines.Continuation;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b!\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\b\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\b¢\u0006\u0002\u0010\u0017\u001a?\u0010\u001a\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\b\u001aZ\u0010\u001c\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\f\"\u0004\b\u0001\u0010\r\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\f0\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u0005H\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0002\b!\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0002\b#\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0002\b%\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0002\b'\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0002\b)\u001a,\u0010*\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$H\u0007\u001aF\u0010*\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a+\u0010.\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0002¢\u0006\u0002\u00101\u001a\u0016\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00102\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a\u001c\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00104\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a0\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a7\u0010<\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$2\u0012\u0010=\u001a\u000e\u0012\u0004\u0012\u00020$\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010>\u001a%\u0010?\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010:\u001a\u00020$¢\u0006\u0002\u0010;\u001a0\u0010@\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010B\u001aa\u0010E\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010BH\b¢\u0006\u0002\u0010H\u001a$\u0010I\u001a\r\u0012\t\u0012\u0007H-¢\u0006\u0002\bJ0\u0003\"\u0006\b\u0000\u0010-\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\b\u001a8\u0010K\u001a\u0002HF\"\u0006\b\u0000\u0010-\u0018\u0001\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HFH\b¢\u0006\u0002\u0010L\u001a0\u0010M\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010N\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010P\u001a\u0002HF\"\u0010\b\u0000\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G\"\b\b\u0001\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001aL\u0010Q\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001aL\u0010S\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a4\u0010T\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a4\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a\u001b\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a2\u0010W\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a\u001d\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a4\u0010Y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a<\u0010Z\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005\u001aX\u0010[\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H-0\u00030\u0005H\b¢\u0006\u0002\u0010R\u001aU\u0010\\\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2'\u0010^\u001a#\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\b¢\u0006\u0002\u0010`\u001aj\u0010a\u001a\u0002H-\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010]\u001a\u0002H-2<\u0010^\u001a8\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0013\u0012\u0011H-¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0bH\b¢\u0006\u0002\u0010c\u001a-\u0010d\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\b\u001aB\u0010g\u001a\u00020e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010f\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0BH\b\u001aE\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b\u001a_\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0+0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b\u001a^\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b¢\u0006\u0002\u0010\u0017\u001ax\u0010i\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0j0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b¢\u0006\u0002\u0010\u0018\u001aA\u0010k\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0l\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b\u001a(\u0010m\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010n\u001a-\u0010o\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a-\u0010p\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a{\u0010q\u001a\u0002Hr\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010r*\u00060sj\u0002`t*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010u\u001a\u0002Hr2\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005¢\u0006\u0002\u0010|\u001a`\u0010}\u001a\u00020~\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010v\u001a\u00020w2\b\b\u0002\u0010x\u001a\u00020w2\b\b\u0002\u0010y\u001a\u00020w2\b\b\u0002\u0010z\u001a\u00020$2\b\b\u0002\u0010{\u001a\u00020w2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020w\u0018\u00010\u0005\u001a\u001b\u0010\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a2\u0010\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a)\u0010\u0001\u001a\u00020$\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b/*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002¢\u0006\u0002\u0010n\u001a\u001e\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a7\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005\u001aL\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0B\u001aR\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0B\u001an\u0010\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0BH\b¢\u0006\u0002\u0010H\u001ah\u0010\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0BH\b¢\u0006\u0002\u0010H\u001a=\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005\u001aY\u0010\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010-*\u00020O\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\b¢\u0006\u0002\u0010R\u001aS\u0010\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0010\b\u0002\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H-0G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\b¢\u0006\u0002\u0010R\u001a*\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001aF\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\b¢\u0006\u0002\u0010U\u001a>\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001¢\u0006\u0003\u0010\u0001\u001a*\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001aF\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u0005H\b¢\u0006\u0002\u0010U\u001a>\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001¢\u0006\u0003\u0010\u0001\u001a.\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0002¢\u0006\u0003\u0010\u0001\u001a8\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0001H\u0002¢\u0006\u0003\u0010\u0001\u001a/\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0002\u001a/\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0002\u001a.\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\b¢\u0006\u0003\u0010\u0001\u001a\u0017\u0010\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a3\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010f\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020e0\u0005H\u0007\u001aF\u0010 \u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a.\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\u0002¢\u0006\u0003\u0010\u0001\u001a8\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0001H\u0002¢\u0006\u0003\u0010\u0001\u001a/\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0002\u001a/\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0002\u001a.\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u0002H\u0002H\b¢\u0006\u0003\u0010\u0001\u001aX\u0010£\u0001\u001a\u0003H¤\u0001\"\u0005\b\u0000\u0010¤\u0001\"\t\b\u0001\u0010\u0002*\u0003H¤\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010^\u001a%\u0012\u0014\u0012\u0012H¤\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¤\u00010BH\b¢\u0006\u0003\u0010¥\u0001\u001am\u0010¦\u0001\u001a\u0003H¤\u0001\"\u0005\b\u0000\u0010¤\u0001\"\t\b\u0001\u0010\u0002*\u0003H¤\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010^\u001a:\u0012\u0013\u0012\u00110$¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(:\u0012\u0014\u0012\u0012H¤\u0001¢\u0006\f\bC\u0012\b\bD\u0012\u0004\b\b(_\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¤\u00010bH\b¢\u0006\u0003\u0010§\u0001\u001a#\u0010¨\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\u001c\u0010©\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a3\u0010©\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a\u001e\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010X\u001a5\u0010ª\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010U\u001a(\u0010«\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010¬\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\b\u001aI\u0010­\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010-*\t\u0012\u0004\u0012\u0002H-0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00105\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H-0\u0005H\b\u001a(\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010¯\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\b±\u0001\u001a\u0019\u0010°\u0001\u001a\u00020\u001e*\b\u0012\u0004\u0012\u00020\u001e0\u0003H\u0007¢\u0006\u0003\b²\u0001\u001a\u0019\u0010°\u0001\u001a\u00020\"*\b\u0012\u0004\u0012\u00020\"0\u0003H\u0007¢\u0006\u0003\b³\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020$0\u0003H\u0007¢\u0006\u0003\b´\u0001\u001a\u0019\u0010°\u0001\u001a\u00020&*\b\u0012\u0004\u0012\u00020&0\u0003H\u0007¢\u0006\u0003\bµ\u0001\u001a\u0019\u0010°\u0001\u001a\u00020$*\b\u0012\u0004\u0012\u00020(0\u0003H\u0007¢\u0006\u0003\b¶\u0001\u001a.\u0010·\u0001\u001a\u00020$\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020$0\u0005H\b\u001a.\u0010¸\u0001\u001a\u00020\u001e\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00105\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001e0\u0005H\b\u001a%\u0010¹\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020$\u001a1\u0010º\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010»\u0001\u001a\u0002HF\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010F*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020G*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HF¢\u0006\u0002\u0010L\u001a)\u0010¼\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020½\u0001j\t\u0012\u0004\u0012\u0002H\u0002`¾\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010¿\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020+\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010À\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020j\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010Á\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020Â\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010Ã\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020Ä\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010Å\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010Æ\u0001\u001a\u00020$2\t\b\u0002\u0010Ç\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010,\u001a\u00020$2\t\b\u0002\u0010Æ\u0001\u001a\u00020$2\t\b\u0002\u0010Ç\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020+\u0012\u0004\u0012\u0002H-0\u0005H\u0007\u001a$\u0010È\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020É\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010Ê\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H-0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ë\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003H\u0004\u001ar\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010Ë\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Ì\u0001\u0012\u0014\u0012\u0012H-¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Í\u0001\u0012\u0004\u0012\u0002H\r0B\u001a+\u0010Î\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010Î\u0001\u001a\b\u0012\u0004\u0012\u0002H-0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010-*\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Ì\u0001\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bC\u0012\t\bD\u0012\u0005\b\b(Í\u0001\u0012\u0004\u0012\u0002H-0BH\u0007¨\u0006Ï\u0001"}, d2 = {"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, k = 5, mv = {1, 1, 13}, xi = 1, xs = "kotlin/sequences/SequencesKt")
class SequencesKt___SequencesKt extends SequencesKt___SequencesJvmKt {
    @InlineOnly
    private static final <T> Sequence<T> U(@NotNull Sequence<? extends T> sequence) {
        return sequence;
    }

    public static final <T> boolean a(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.b(sequence, t) >= 0;
    }

    public static final <T> T a(@NotNull Sequence<? extends T> sequence, int i) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.a(sequence, i, new SequencesKt___SequencesKt$elementAt$1(i));
    }

    public static final <T> T a(@NotNull Sequence<? extends T> sequence, int i, @NotNull Function1<? super Integer, ? extends T> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "defaultValue");
        if (i < 0) {
            return function1.invoke(Integer.valueOf(i));
        }
        Iterator<? extends T> a2 = sequence.a();
        int i2 = 0;
        while (a2.hasNext()) {
            T next = a2.next();
            int i3 = i2 + 1;
            if (i == i2) {
                return next;
            }
            i2 = i3;
        }
        return function1.invoke(Integer.valueOf(i));
    }

    @Nullable
    public static final <T> T b(@NotNull Sequence<? extends T> sequence, int i) {
        Intrinsics.f(sequence, "receiver$0");
        if (i < 0) {
            return null;
        }
        Iterator<? extends T> a2 = sequence.a();
        int i2 = 0;
        while (a2.hasNext()) {
            T next = a2.next();
            int i3 = i2 + 1;
            if (i == i2) {
                return next;
            }
            i2 = i3;
        }
        return null;
    }

    public static final <T> T f(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (a2.hasNext()) {
            return a2.next();
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> T a(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                return next;
            }
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T g(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        return a2.next();
    }

    @Nullable
    public static final <T> T b(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                return next;
            }
        }
        return null;
    }

    public static final <T> int b(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            if (i < 0) {
                CollectionsKt.b();
            }
            if (Intrinsics.a((Object) t, (Object) next)) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static final <T> int c(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            if (i < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.b();
                } else {
                    throw new ArithmeticException("Index overflow has happened.");
                }
            }
            if (function1.invoke(next).booleanValue()) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static final <T> int d(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        int i2 = -1;
        while (a2.hasNext()) {
            Object next = a2.next();
            if (i < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.b();
                } else {
                    throw new ArithmeticException("Index overflow has happened.");
                }
            }
            if (function1.invoke(next).booleanValue()) {
                i2 = i;
            }
            i++;
        }
        return i2;
    }

    public static final <T> T h(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (a2.hasNext()) {
            T next = a2.next();
            while (a2.hasNext()) {
                next = a2.next();
            }
            return next;
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> T e(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        T t = null;
        boolean z = false;
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                t = next;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    public static final <T> int c(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        int i = -1;
        int i2 = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            if (i2 < 0) {
                CollectionsKt.b();
            }
            if (Intrinsics.a((Object) t, (Object) next)) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    @Nullable
    public static final <T> T i(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T next = a2.next();
        while (a2.hasNext()) {
            next = a2.next();
        }
        return next;
    }

    @Nullable
    public static final <T> T f(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        T t = null;
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                t = next;
            }
        }
        return t;
    }

    public static final <T> T j(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (a2.hasNext()) {
            T next = a2.next();
            if (!a2.hasNext()) {
                return next;
            }
            throw new IllegalArgumentException("Sequence has more than one element.");
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> T g(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        T t = null;
        boolean z = false;
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                if (!z) {
                    t = next;
                    z = true;
                } else {
                    throw new IllegalArgumentException("Sequence contains more than one matching element.");
                }
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T k(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T next = a2.next();
        if (a2.hasNext()) {
            return null;
        }
        return next;
    }

    @Nullable
    public static final <T> T h(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        boolean z = false;
        T t = null;
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = next;
            }
        }
        if (!z) {
            return null;
        }
        return t;
    }

    @NotNull
    public static final <T> Sequence<T> c(@NotNull Sequence<? extends T> sequence, int i) {
        Intrinsics.f(sequence, "receiver$0");
        if (!(i >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        } else if (i == 0) {
            return sequence;
        } else {
            if (sequence instanceof DropTakeSequence) {
                return ((DropTakeSequence) sequence).a(i);
            }
            return new DropSequence<>(sequence, i);
        }
    }

    @NotNull
    public static final <T> Sequence<T> i(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        return new DropWhileSequence<>(sequence, function1);
    }

    @NotNull
    public static final <T> Sequence<T> j(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        return new FilteringSequence<>(sequence, true, function1);
    }

    @NotNull
    public static final <T> Sequence<T> a(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function2, "predicate");
        return new TransformingSequence<>(new FilteringSequence(new IndexingSequence(sequence), true, new SequencesKt___SequencesKt$filterIndexed$1(function2)), SequencesKt___SequencesKt$filterIndexed$2.INSTANCE);
    }

    private static final <R> Sequence<R> T(@NotNull Sequence<?> sequence) {
        Intrinsics.f();
        Sequence<R> j = SequencesKt.j(sequence, SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE);
        if (j != null) {
            return j;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
    }

    private static final <R, C extends Collection<? super R>> C c(@NotNull Sequence<?> sequence, C c) {
        Iterator<?> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            Intrinsics.a(3, "R");
            if (next instanceof Object) {
                c.add(next);
            }
        }
        return c;
    }

    @NotNull
    public static final <T> Sequence<T> k(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        return new FilteringSequence<>(sequence, false, function1);
    }

    @NotNull
    public static final <T> Sequence<T> l(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Sequence<T> k = SequencesKt.k(sequence, SequencesKt___SequencesKt$filterNotNull$1.INSTANCE);
        if (k != null) {
            return k;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C a(@NotNull Sequence<? extends T> sequence, @NotNull C c) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            if (next != null) {
                c.add(next);
            }
        }
        return c;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C a(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            if (!function1.invoke(next).booleanValue()) {
                c.add(next);
            }
        }
        return c;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C b(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                c.add(next);
            }
        }
        return c;
    }

    @NotNull
    public static final <T> Sequence<T> d(@NotNull Sequence<? extends T> sequence, int i) {
        Intrinsics.f(sequence, "receiver$0");
        if (!(i >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        } else if (i == 0) {
            return SequencesKt.b();
        } else {
            if (sequence instanceof DropTakeSequence) {
                return ((DropTakeSequence) sequence).b(i);
            }
            return new TakeSequence<>(sequence, i);
        }
    }

    @NotNull
    public static final <T> Sequence<T> l(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        return new TakeWhileSequence<>(sequence, function1);
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> m(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return new SequencesKt___SequencesKt$sorted$1(sequence);
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> m(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        return SequencesKt.b(sequence, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> n(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        return SequencesKt.b(sequence, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> n(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.b(sequence, ComparisonsKt.b());
    }

    @NotNull
    public static final <T> Sequence<T> b(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(comparator, "comparator");
        return new SequencesKt___SequencesKt$sortedWith$1(sequence, comparator);
    }

    @NotNull
    public static final <T, K, V> Map<K, V> o(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "transform");
        Map<K, V> linkedHashMap = new LinkedHashMap<>();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Pair pair = (Pair) function1.invoke(a2.next());
            linkedHashMap.put(pair.getFirst(), pair.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K> Map<K, T> p(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "keySelector");
        Map<K, T> linkedHashMap = new LinkedHashMap<>();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            linkedHashMap.put(function1.invoke(next), next);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> a(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "keySelector");
        Intrinsics.f(function12, "valueTransform");
        Map<K, V> linkedHashMap = new LinkedHashMap<>();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            linkedHashMap.put(function1.invoke(next), function12.invoke(next));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M a(@NotNull Sequence<? extends T> sequence, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(m, "destination");
        Intrinsics.f(function1, "keySelector");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            m.put(function1.invoke(next), next);
        }
        return m;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M a(@NotNull Sequence<? extends T> sequence, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(m, "destination");
        Intrinsics.f(function1, "keySelector");
        Intrinsics.f(function12, "valueTransform");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            m.put(function1.invoke(next), function12.invoke(next));
        }
        return m;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M b(@NotNull Sequence<? extends T> sequence, @NotNull M m, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(m, "destination");
        Intrinsics.f(function1, "transform");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Pair pair = (Pair) function1.invoke(a2.next());
            m.put(pair.getFirst(), pair.getSecond());
        }
        return m;
    }

    @NotNull
    @SinceKotlin(version = "1.3")
    public static final <K, V> Map<K, V> q(@NotNull Sequence<? extends K> sequence, @NotNull Function1<? super K, ? extends V> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "valueSelector");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends K> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            linkedHashMap.put(next, function1.invoke(next));
        }
        return linkedHashMap;
    }

    @NotNull
    @SinceKotlin(version = "1.3")
    public static final <K, V, M extends Map<? super K, ? super V>> M c(@NotNull Sequence<? extends K> sequence, @NotNull M m, @NotNull Function1<? super K, ? extends V> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(m, "destination");
        Intrinsics.f(function1, "valueSelector");
        Iterator<? extends K> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            m.put(next, function1.invoke(next));
        }
        return m;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C b(@NotNull Sequence<? extends T> sequence, @NotNull C c) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            c.add(a2.next());
        }
        return c;
    }

    @NotNull
    public static final <T> HashSet<T> o(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return (HashSet) SequencesKt.b(sequence, new HashSet());
    }

    @NotNull
    public static final <T> List<T> p(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return CollectionsKt.b(SequencesKt.q(sequence));
    }

    @NotNull
    public static final <T> List<T> q(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return (List) SequencesKt.b(sequence, new ArrayList());
    }

    @NotNull
    public static final <T> Set<T> r(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return SetsKt.a((Set) SequencesKt.b(sequence, new LinkedHashSet()));
    }

    @NotNull
    public static final <T, R> Sequence<R> r(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "transform");
        return new FlatteningSequence<>(sequence, function1, SequencesKt___SequencesKt$flatMap$1.INSTANCE);
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C c(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function1, "transform");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            CollectionsKt.a(c, (Sequence) function1.invoke(a2.next()));
        }
        return c;
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> s(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "keySelector");
        Map<K, List<T>> linkedHashMap = new LinkedHashMap<>();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            Object invoke = function1.invoke(next);
            List<T> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(next);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, V> Map<K, List<V>> b(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "keySelector");
        Intrinsics.f(function12, "valueTransform");
        Map<K, List<V>> linkedHashMap = new LinkedHashMap<>();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            Object invoke = function1.invoke(next);
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(next));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M d(@NotNull Sequence<? extends T> sequence, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(m, "destination");
        Intrinsics.f(function1, "keySelector");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            Object invoke = function1.invoke(next);
            Object obj = m.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m.put(invoke, obj);
            }
            ((List) obj).add(next);
        }
        return m;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M b(@NotNull Sequence<? extends T> sequence, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(m, "destination");
        Intrinsics.f(function1, "keySelector");
        Intrinsics.f(function12, "valueTransform");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            Object invoke = function1.invoke(next);
            Object obj = m.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(next));
        }
        return m;
    }

    @NotNull
    @SinceKotlin(version = "1.1")
    public static final <T, K> Grouping<T, K> t(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "keySelector");
        return new SequencesKt___SequencesKt$groupingBy$1(sequence, function1);
    }

    @NotNull
    public static final <T, R> Sequence<R> u(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "transform");
        return new TransformingSequence<>(sequence, function1);
    }

    @NotNull
    public static final <T, R> Sequence<R> b(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function2, "transform");
        return new TransformingIndexedSequence<>(sequence, function2);
    }

    @NotNull
    public static final <T, R> Sequence<R> c(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function2, "transform");
        return SequencesKt.l(new TransformingIndexedSequence(sequence, function2));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C c(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function2, "transform");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            int i2 = i + 1;
            if (i < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.b();
                } else {
                    throw new ArithmeticException("Index overflow has happened.");
                }
            }
            c.add(function2.invoke(Integer.valueOf(i), next));
            i = i2;
        }
        return c;
    }

    @NotNull
    public static final <T, R> Sequence<R> v(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "transform");
        return SequencesKt.l(new TransformingSequence(sequence, function1));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C e(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function1, "transform");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            c.add(function1.invoke(a2.next()));
        }
        return c;
    }

    @NotNull
    public static final <T> Sequence<IndexedValue<T>> s(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return new IndexingSequence<>(sequence);
    }

    @NotNull
    public static final <T> Sequence<T> t(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.w(sequence, SequencesKt___SequencesKt$distinct$1.INSTANCE);
    }

    @NotNull
    public static final <T, K> Sequence<T> w(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        return new DistinctSequence<>(sequence, function1);
    }

    @NotNull
    public static final <T> Set<T> u(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        LinkedHashSet linkedHashSet = new LinkedHashSet();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            linkedHashSet.add(a2.next());
        }
        return linkedHashSet;
    }

    public static final <T> boolean x(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            if (!function1.invoke(a2.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean v(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return sequence.a().hasNext();
    }

    public static final <T> boolean y(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            if (function1.invoke(a2.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final <T> int w(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            a2.next();
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        return i;
    }

    public static final <T> int z(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            if (function1.invoke(a2.next()).booleanValue() && (i = i + 1) < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.c();
                } else {
                    throw new ArithmeticException("Count overflow has happened.");
                }
            }
        }
        return i;
    }

    /* JADX WARNING: type inference failed for: r3v0, types: [java.lang.Object, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R>] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final <T, R> R a(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, R r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> r3) {
        /*
            java.lang.String r0 = "receiver$0"
            kotlin.jvm.internal.Intrinsics.f(r1, r0)
            java.lang.String r0 = "operation"
            kotlin.jvm.internal.Intrinsics.f(r3, r0)
            java.util.Iterator r1 = r1.a()
        L_0x000e:
            boolean r0 = r1.hasNext()
            if (r0 == 0) goto L_0x001d
            java.lang.Object r0 = r1.next()
            java.lang.Object r2 = r3.invoke(r2, r0)
            goto L_0x000e
        L_0x001d:
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.a(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function2):java.lang.Object");
    }

    /* JADX WARNING: type inference failed for: r8v0, types: [kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R>, kotlin.jvm.functions.Function3, java.lang.Object] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final <T, R> R a(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r6, R r7, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> r8) {
        /*
            java.lang.String r0 = "receiver$0"
            kotlin.jvm.internal.Intrinsics.f(r6, r0)
            java.lang.String r0 = "operation"
            kotlin.jvm.internal.Intrinsics.f(r8, r0)
            java.util.Iterator r6 = r6.a()
            r0 = 0
            r1 = r7
            r7 = 0
        L_0x0011:
            boolean r2 = r6.hasNext()
            if (r2 == 0) goto L_0x003f
            java.lang.Object r2 = r6.next()
            int r3 = r7 + 1
            if (r7 >= 0) goto L_0x0035
            r4 = 3
            r5 = 1
            boolean r4 = kotlin.internal.PlatformImplementationsKt.a(r5, r4, r0)
            if (r4 == 0) goto L_0x002b
            kotlin.collections.CollectionsKt.b()
            goto L_0x0035
        L_0x002b:
            java.lang.ArithmeticException r6 = new java.lang.ArithmeticException
            java.lang.String r7 = "Index overflow has happened."
            r6.<init>(r7)
            java.lang.Throwable r6 = (java.lang.Throwable) r6
            throw r6
        L_0x0035:
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            java.lang.Object r1 = r8.invoke(r7, r1, r2)
            r7 = r3
            goto L_0x0011
        L_0x003f:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.a(kotlin.sequences.Sequence, java.lang.Object, kotlin.jvm.functions.Function3):java.lang.Object");
    }

    public static final <T> void A(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Unit> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "action");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            function1.invoke(a2.next());
        }
    }

    public static final <T> void d(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, Unit> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function2, "action");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            int i2 = i + 1;
            if (i < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.b();
                } else {
                    throw new ArithmeticException("Index overflow has happened.");
                }
            }
            function2.invoke(Integer.valueOf(i), next);
            i = i2;
        }
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double x(@NotNull Sequence<Double> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Double> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        double doubleValue = a2.next().doubleValue();
        if (Double.isNaN(doubleValue)) {
            return Double.valueOf(doubleValue);
        }
        while (a2.hasNext()) {
            double doubleValue2 = a2.next().doubleValue();
            if (Double.isNaN(doubleValue2)) {
                return Double.valueOf(doubleValue2);
            }
            if (doubleValue < doubleValue2) {
                doubleValue = doubleValue2;
            }
        }
        return Double.valueOf(doubleValue);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float y(@NotNull Sequence<Float> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Float> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        float floatValue = a2.next().floatValue();
        if (Float.isNaN(floatValue)) {
            return Float.valueOf(floatValue);
        }
        while (a2.hasNext()) {
            float floatValue2 = a2.next().floatValue();
            if (Float.isNaN(floatValue2)) {
                return Float.valueOf(floatValue2);
            }
            if (floatValue < floatValue2) {
                floatValue = floatValue2;
            }
        }
        return Float.valueOf(floatValue);
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T z(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T t = (Comparable) a2.next();
        while (a2.hasNext()) {
            T t2 = (Comparable) a2.next();
            if (t.compareTo(t2) < 0) {
                t = t2;
            }
        }
        return t;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T B(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T next = a2.next();
        Comparable comparable = (Comparable) function1.invoke(next);
        while (a2.hasNext()) {
            T next2 = a2.next();
            Comparable comparable2 = (Comparable) function1.invoke(next2);
            if (comparable.compareTo(comparable2) < 0) {
                next = next2;
                comparable = comparable2;
            }
        }
        return next;
    }

    @Nullable
    public static final <T> T c(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(comparator, "comparator");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T next = a2.next();
        while (a2.hasNext()) {
            T next2 = a2.next();
            if (comparator.compare(next, next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double A(@NotNull Sequence<Double> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Double> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        double doubleValue = a2.next().doubleValue();
        if (Double.isNaN(doubleValue)) {
            return Double.valueOf(doubleValue);
        }
        while (a2.hasNext()) {
            double doubleValue2 = a2.next().doubleValue();
            if (Double.isNaN(doubleValue2)) {
                return Double.valueOf(doubleValue2);
            }
            if (doubleValue > doubleValue2) {
                doubleValue = doubleValue2;
            }
        }
        return Double.valueOf(doubleValue);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float B(@NotNull Sequence<Float> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Float> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        float floatValue = a2.next().floatValue();
        if (Float.isNaN(floatValue)) {
            return Float.valueOf(floatValue);
        }
        while (a2.hasNext()) {
            float floatValue2 = a2.next().floatValue();
            if (Float.isNaN(floatValue2)) {
                return Float.valueOf(floatValue2);
            }
            if (floatValue > floatValue2) {
                floatValue = floatValue2;
            }
        }
        return Float.valueOf(floatValue);
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T C(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T t = (Comparable) a2.next();
        while (a2.hasNext()) {
            T t2 = (Comparable) a2.next();
            if (t.compareTo(t2) > 0) {
                t = t2;
            }
        }
        return t;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T C(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T next = a2.next();
        Comparable comparable = (Comparable) function1.invoke(next);
        while (a2.hasNext()) {
            T next2 = a2.next();
            Comparable comparable2 = (Comparable) function1.invoke(next2);
            if (comparable.compareTo(comparable2) > 0) {
                next = next2;
                comparable = comparable2;
            }
        }
        return next;
    }

    @Nullable
    public static final <T> T d(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(comparator, "comparator");
        Iterator<? extends T> a2 = sequence.a();
        if (!a2.hasNext()) {
            return null;
        }
        T next = a2.next();
        while (a2.hasNext()) {
            T next2 = a2.next();
            if (comparator.compare(next, next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    public static final <T> boolean D(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return !sequence.a().hasNext();
    }

    public static final <T> boolean D(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            if (function1.invoke(a2.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @NotNull
    @SinceKotlin(version = "1.1")
    public static final <T> Sequence<T> E(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Unit> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "action");
        return SequencesKt.u(sequence, new SequencesKt___SequencesKt$onEach$1(function1));
    }

    /* JADX WARNING: type inference failed for: r3v0, types: [java.lang.Object, kotlin.jvm.functions.Function2, kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S>] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final <S, T extends S> S e(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> r3) {
        /*
            java.lang.String r0 = "receiver$0"
            kotlin.jvm.internal.Intrinsics.f(r2, r0)
            java.lang.String r0 = "operation"
            kotlin.jvm.internal.Intrinsics.f(r3, r0)
            java.util.Iterator r2 = r2.a()
            boolean r0 = r2.hasNext()
            if (r0 == 0) goto L_0x0028
            java.lang.Object r0 = r2.next()
        L_0x0018:
            boolean r1 = r2.hasNext()
            if (r1 == 0) goto L_0x0027
            java.lang.Object r1 = r2.next()
            java.lang.Object r0 = r3.invoke(r0, r1)
            goto L_0x0018
        L_0x0027:
            return r0
        L_0x0028:
            java.lang.UnsupportedOperationException r2 = new java.lang.UnsupportedOperationException
            java.lang.String r3 = "Empty sequence can't be reduced."
            r2.<init>(r3)
            java.lang.Throwable r2 = (java.lang.Throwable) r2
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.e(kotlin.sequences.Sequence, kotlin.jvm.functions.Function2):java.lang.Object");
    }

    /* JADX WARNING: type inference failed for: r7v0, types: [kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S>, kotlin.jvm.functions.Function3, java.lang.Object] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final <S, T extends S> S a(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r6, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> r7) {
        /*
            java.lang.String r0 = "receiver$0"
            kotlin.jvm.internal.Intrinsics.f(r6, r0)
            java.lang.String r0 = "operation"
            kotlin.jvm.internal.Intrinsics.f(r7, r0)
            java.util.Iterator r6 = r6.a()
            boolean r0 = r6.hasNext()
            if (r0 == 0) goto L_0x004a
            java.lang.Object r0 = r6.next()
            r1 = 1
            r2 = r0
            r0 = 1
        L_0x001b:
            boolean r3 = r6.hasNext()
            if (r3 == 0) goto L_0x0049
            int r3 = r0 + 1
            if (r0 >= 0) goto L_0x003b
            r4 = 3
            r5 = 0
            boolean r4 = kotlin.internal.PlatformImplementationsKt.a(r1, r4, r5)
            if (r4 == 0) goto L_0x0031
            kotlin.collections.CollectionsKt.b()
            goto L_0x003b
        L_0x0031:
            java.lang.ArithmeticException r6 = new java.lang.ArithmeticException
            java.lang.String r7 = "Index overflow has happened."
            r6.<init>(r7)
            java.lang.Throwable r6 = (java.lang.Throwable) r6
            throw r6
        L_0x003b:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            java.lang.Object r4 = r6.next()
            java.lang.Object r2 = r7.invoke(r0, r2, r4)
            r0 = r3
            goto L_0x001b
        L_0x0049:
            return r2
        L_0x004a:
            java.lang.UnsupportedOperationException r6 = new java.lang.UnsupportedOperationException
            java.lang.String r7 = "Empty sequence can't be reduced."
            r6.<init>(r7)
            java.lang.Throwable r6 = (java.lang.Throwable) r6
            throw r6
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.a(kotlin.sequences.Sequence, kotlin.jvm.functions.Function3):java.lang.Object");
    }

    public static final <T> int F(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Integer> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            i += function1.invoke(a2.next()).intValue();
        }
        return i;
    }

    public static final <T> double G(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Double> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "selector");
        Iterator<? extends T> a2 = sequence.a();
        double d = 0.0d;
        while (a2.hasNext()) {
            d += function1.invoke(a2.next()).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final <T> Sequence<T> E(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.u(sequence, new SequencesKt___SequencesKt$requireNoNulls$1(sequence));
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static final <T> Sequence<List<T>> e(@NotNull Sequence<? extends T> sequence, int i) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.a(sequence, i, i, true);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static final <T, R> Sequence<R> b(@NotNull Sequence<? extends T> sequence, int i, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "transform");
        return SequencesKt.a(sequence, i, i, true, function1);
    }

    @NotNull
    public static final <T> Sequence<T> d(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.f(sequence, "receiver$0");
        return new SequencesKt___SequencesKt$minus$1(sequence, t);
    }

    @NotNull
    public static final <T> Sequence<T> a(@NotNull Sequence<? extends T> sequence, @NotNull T[] tArr) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(tArr, MessengerShareContentUtility.ELEMENTS);
        if (tArr.length == 0) {
            return sequence;
        }
        return new SequencesKt___SequencesKt$minus$2(sequence, tArr);
    }

    @NotNull
    public static final <T> Sequence<T> a(@NotNull Sequence<? extends T> sequence, @NotNull Iterable<? extends T> iterable) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(iterable, MessengerShareContentUtility.ELEMENTS);
        return new SequencesKt___SequencesKt$minus$3(sequence, iterable);
    }

    @NotNull
    public static final <T> Sequence<T> a(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends T> sequence2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(sequence2, MessengerShareContentUtility.ELEMENTS);
        return new SequencesKt___SequencesKt$minus$4(sequence, sequence2);
    }

    @InlineOnly
    private static final <T> Sequence<T> f(@NotNull Sequence<? extends T> sequence, T t) {
        return SequencesKt.d(sequence, t);
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> H(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "predicate");
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                arrayList.add(next);
            } else {
                arrayList2.add(next);
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @NotNull
    public static final <T> Sequence<T> e(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.a(SequencesKt.a((T[]) new Sequence[]{sequence, SequencesKt.a((T[]) new Object[]{t})}));
    }

    @NotNull
    public static final <T> Sequence<T> b(@NotNull Sequence<? extends T> sequence, @NotNull T[] tArr) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(tArr, MessengerShareContentUtility.ELEMENTS);
        return SequencesKt.b(sequence, ArraysKt.c(tArr));
    }

    @NotNull
    public static final <T> Sequence<T> b(@NotNull Sequence<? extends T> sequence, @NotNull Iterable<? extends T> iterable) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(iterable, MessengerShareContentUtility.ELEMENTS);
        return SequencesKt.a(SequencesKt.a((T[]) new Sequence[]{sequence, CollectionsKt.I(iterable)}));
    }

    @NotNull
    public static final <T> Sequence<T> b(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends T> sequence2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(sequence2, MessengerShareContentUtility.ELEMENTS);
        return SequencesKt.a(SequencesKt.a((T[]) new Sequence[]{sequence, sequence2}));
    }

    @InlineOnly
    private static final <T> Sequence<T> g(@NotNull Sequence<? extends T> sequence, T t) {
        return SequencesKt.e(sequence, t);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static /* synthetic */ Sequence a(Sequence sequence, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return SequencesKt.a(sequence, i, i2, z);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static final <T> Sequence<List<T>> a(@NotNull Sequence<? extends T> sequence, int i, int i2, boolean z) {
        Intrinsics.f(sequence, "receiver$0");
        return SlidingWindowKt.a(sequence, i, i2, z, false);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static /* synthetic */ Sequence a(Sequence sequence, int i, int i2, boolean z, Function1 function1, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return SequencesKt.a(sequence, i, i2, z, function1);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static final <T, R> Sequence<R> a(@NotNull Sequence<? extends T> sequence, int i, int i2, boolean z, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function1, "transform");
        return SequencesKt.u(SlidingWindowKt.a(sequence, i, i2, z, true), function1);
    }

    @NotNull
    public static final <T, R> Sequence<Pair<T, R>> c(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends R> sequence2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(sequence2, "other");
        return new MergingSequence<>(sequence, sequence2, SequencesKt___SequencesKt$zip$1.INSTANCE);
    }

    @NotNull
    public static final <T, R, V> Sequence<V> a(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends R> sequence2, @NotNull Function2<? super T, ? super R, ? extends V> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(sequence2, "other");
        Intrinsics.f(function2, "transform");
        return new MergingSequence<>(sequence, sequence2, function2);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static final <T> Sequence<Pair<T, T>> F(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return SequencesKt.f(sequence, SequencesKt___SequencesKt$zipWithNext$1.INSTANCE);
    }

    @NotNull
    @SinceKotlin(version = "1.2")
    public static final <T, R> Sequence<R> f(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super T, ? super T, ? extends R> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(function2, "transform");
        return SequencesKt.a(new SequencesKt___SequencesKt$zipWithNext$2(sequence, function2, (Continuation) null));
    }

    @NotNull
    public static /* synthetic */ Appendable a(Sequence sequence, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        return SequencesKt.a(sequence, appendable, (i2 & 2) != 0 ? ", " : charSequence, (i2 & 4) != 0 ? "" : charSequence2, (i2 & 8) != 0 ? "" : charSequence3, (i2 & 16) != 0 ? -1 : i, (i2 & 32) != 0 ? "..." : charSequence4, (i2 & 64) != 0 ? null : function1);
    }

    @NotNull
    public static final <T, A extends Appendable> A a(@NotNull Sequence<? extends T> sequence, @NotNull A a2, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(a2, "buffer");
        Intrinsics.f(charSequence, "separator");
        Intrinsics.f(charSequence2, Constants.Name.PREFIX);
        Intrinsics.f(charSequence3, "postfix");
        Intrinsics.f(charSequence4, "truncated");
        a2.append(charSequence2);
        Iterator<? extends T> a3 = sequence.a();
        int i2 = 0;
        while (a3.hasNext()) {
            Object next = a3.next();
            i2++;
            if (i2 > 1) {
                a2.append(charSequence);
            }
            if (i >= 0 && i2 > i) {
                break;
            }
            StringsKt.a(a2, next, function1);
        }
        if (i >= 0 && i2 > i) {
            a2.append(charSequence4);
        }
        a2.append(charSequence3);
        return a2;
    }

    @NotNull
    public static /* synthetic */ String a(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        if ((i2 & 1) != 0) {
        }
        if ((i2 & 2) != 0) {
        }
        CharSequence charSequence5 = charSequence2;
        if ((i2 & 4) != 0) {
            charSequence3 = "";
        }
        CharSequence charSequence6 = charSequence3;
        int i3 = (i2 & 8) != 0 ? -1 : i;
        if ((i2 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i2 & 32) != 0) {
            function1 = null;
        }
        return SequencesKt.a(sequence, charSequence, charSequence5, charSequence6, i3, charSequence7, function1);
    }

    @NotNull
    public static final <T> String a(@NotNull Sequence<? extends T> sequence, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(charSequence, "separator");
        Intrinsics.f(charSequence2, Constants.Name.PREFIX);
        Intrinsics.f(charSequence3, "postfix");
        Intrinsics.f(charSequence4, "truncated");
        String sb = ((StringBuilder) SequencesKt.a(sequence, new StringBuilder(), charSequence, charSequence2, charSequence3, i, charSequence4, function1)).toString();
        Intrinsics.b(sb, "joinTo(StringBuilder(), …ed, transform).toString()");
        return sb;
    }

    @NotNull
    public static final <T> Iterable<T> G(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        return new SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1(sequence);
    }

    @JvmName(name = "averageOfByte")
    public static final double H(@NotNull Sequence<Byte> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Byte> a2 = sequence.a();
        double d = 0.0d;
        int i = 0;
        while (a2.hasNext()) {
            double byteValue = (double) a2.next().byteValue();
            Double.isNaN(byteValue);
            d += byteValue;
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        if (i == 0) {
            return DoubleCompanionObject.f2819a.e();
        }
        double d2 = (double) i;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfShort")
    public static final double I(@NotNull Sequence<Short> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Short> a2 = sequence.a();
        double d = 0.0d;
        int i = 0;
        while (a2.hasNext()) {
            double shortValue = (double) a2.next().shortValue();
            Double.isNaN(shortValue);
            d += shortValue;
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        if (i == 0) {
            return DoubleCompanionObject.f2819a.e();
        }
        double d2 = (double) i;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfInt")
    public static final double J(@NotNull Sequence<Integer> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Integer> a2 = sequence.a();
        double d = 0.0d;
        int i = 0;
        while (a2.hasNext()) {
            double intValue = (double) a2.next().intValue();
            Double.isNaN(intValue);
            d += intValue;
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        if (i == 0) {
            return DoubleCompanionObject.f2819a.e();
        }
        double d2 = (double) i;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfLong")
    public static final double K(@NotNull Sequence<Long> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Long> a2 = sequence.a();
        double d = 0.0d;
        int i = 0;
        while (a2.hasNext()) {
            double longValue = (double) a2.next().longValue();
            Double.isNaN(longValue);
            d += longValue;
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        if (i == 0) {
            return DoubleCompanionObject.f2819a.e();
        }
        double d2 = (double) i;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfFloat")
    public static final double L(@NotNull Sequence<Float> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Float> a2 = sequence.a();
        double d = 0.0d;
        int i = 0;
        while (a2.hasNext()) {
            double floatValue = (double) a2.next().floatValue();
            Double.isNaN(floatValue);
            d += floatValue;
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        if (i == 0) {
            return DoubleCompanionObject.f2819a.e();
        }
        double d2 = (double) i;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfDouble")
    public static final double M(@NotNull Sequence<Double> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Double> a2 = sequence.a();
        double d = 0.0d;
        int i = 0;
        while (a2.hasNext()) {
            d += a2.next().doubleValue();
            i++;
            if (i < 0) {
                CollectionsKt.c();
            }
        }
        if (i == 0) {
            return DoubleCompanionObject.f2819a.e();
        }
        double d2 = (double) i;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "sumOfByte")
    public static final int N(@NotNull Sequence<Byte> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Byte> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            i += a2.next().byteValue();
        }
        return i;
    }

    @JvmName(name = "sumOfShort")
    public static final int O(@NotNull Sequence<Short> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Short> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            i += a2.next().shortValue();
        }
        return i;
    }

    @JvmName(name = "sumOfInt")
    public static final int P(@NotNull Sequence<Integer> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Integer> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            i += a2.next().intValue();
        }
        return i;
    }

    @JvmName(name = "sumOfLong")
    public static final long Q(@NotNull Sequence<Long> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Long> a2 = sequence.a();
        long j = 0;
        while (a2.hasNext()) {
            j += a2.next().longValue();
        }
        return j;
    }

    @JvmName(name = "sumOfFloat")
    public static final float R(@NotNull Sequence<Float> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Float> a2 = sequence.a();
        float f = 0.0f;
        while (a2.hasNext()) {
            f += a2.next().floatValue();
        }
        return f;
    }

    @JvmName(name = "sumOfDouble")
    public static final double S(@NotNull Sequence<Double> sequence) {
        Intrinsics.f(sequence, "receiver$0");
        Iterator<Double> a2 = sequence.a();
        double d = 0.0d;
        while (a2.hasNext()) {
            d += a2.next().doubleValue();
        }
        return d;
    }

    @InlineOnly
    private static final <T> T I(@NotNull Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                return next;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T J(@NotNull Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Iterator<? extends T> a2 = sequence.a();
        T t = null;
        while (a2.hasNext()) {
            T next = a2.next();
            if (function1.invoke(next).booleanValue()) {
                t = next;
            }
        }
        return t;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C a(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function2, "predicate");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            int i2 = i + 1;
            if (i < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.b();
                } else {
                    throw new ArithmeticException("Index overflow has happened.");
                }
            }
            if (function2.invoke(Integer.valueOf(i), next).booleanValue()) {
                c.add(next);
            }
            i = i2;
        }
        return c;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C b(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function2, "transform");
        Iterator<? extends T> a2 = sequence.a();
        int i = 0;
        while (a2.hasNext()) {
            Object next = a2.next();
            int i2 = i + 1;
            if (i < 0) {
                if (PlatformImplementationsKt.a(1, 3, 0)) {
                    CollectionsKt.b();
                } else {
                    throw new ArithmeticException("Index overflow has happened.");
                }
            }
            Object invoke = function2.invoke(Integer.valueOf(i), next);
            if (invoke != null) {
                c.add(invoke);
            }
            i = i2;
        }
        return c;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C d(@NotNull Sequence<? extends T> sequence, @NotNull C c, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.f(sequence, "receiver$0");
        Intrinsics.f(c, "destination");
        Intrinsics.f(function1, "transform");
        Iterator<? extends T> a2 = sequence.a();
        while (a2.hasNext()) {
            Object invoke = function1.invoke(a2.next());
            if (invoke != null) {
                c.add(invoke);
            }
        }
        return c;
    }
}
